generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id                           String    @id @default(cuid())
  name                         String?
  email                        String?   @unique
  emailVerified                DateTime?
  image                        String?
  createdAt                    DateTime  @default(now()) @map("created_at")
  updatedAt                    DateTime  @default(now()) @map("updated_at")
  stripeCustomerId             String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId         String?   @unique @map("stripe_subscription_id")
  stripePriceId                String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd       DateTime? @map("stripe_current_period_end")
  lemonSqueezyCustomerId       String?   @unique @map("lemonsqueezy_customer_id")
  lemonSqueezySubscriptionId   String?   @unique @map("lemonsqueezy_subscription_id")
  lemonSqueezyVariantId        String?   @map("lemonsqueezy_variant_id")
  lemonSqueezyCurrentPeriodEnd DateTime? @map("lemonsqueezy_current_period_end")
  accounts                     Account[]
  domains                      Domain[]
  sessions                     Session[]

  @@map("users")
}

model Domain {
  id                 String              @id @default(cuid())
  userId             String
  domainName         String
  provider           String
  expiresAt          DateTime
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @default(now()) @map("updated_at")
  registrar          String?             @map("registrar")
  nameservers        String?             @map("nameservers")
  lastSslCheck       DateTime?           @map("last_ssl_check")
  isMonitored        Boolean             @default(true) @map("is_monitored")
  lastUptime         Float?              @map("last_uptime")
  healthScore        Float?              @map("health_score")
  lastHealthCheck    DateTime?           @map("last_health_check")
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  performanceMetrics PerformanceMetric[]
  uptimeChecks       UptimeCheck[]

  @@unique([userId, domainName])
  @@index([userId])
  @@map("domains")
}

model UptimeCheck {
  id           String   @id @default(cuid())
  domainId     String   @map("domain_id")
  timestamp    DateTime @default(now())
  isUp         Boolean  @map("is_up")
  responseTime Int?     @map("response_time")
  statusCode   Int?     @map("status_code")
  errorMessage String?  @map("error_message")
  domain       Domain   @relation(fields: [domainId], references: [id], onDelete: Cascade)

  @@index([domainId, timestamp])
  @@map("uptime_checks")
}

model PerformanceMetric {
  id              String   @id @default(cuid())
  domainId        String   @map("domain_id")
  timestamp       DateTime @default(now())
  responseTime    Int      @map("response_time")
  ttfb            Int?     @map("ttfb")
  domainLookup    Int?     @map("domain_lookup")
  connect         Int?     @map("connect")
  tlsHandshake    Int?     @map("tls_handshake")
  contentTransfer Int?     @map("content_transfer")
  domain          Domain   @relation(fields: [domainId], references: [id], onDelete: Cascade)

  @@index([domainId, timestamp])
  @@map("performance_metrics")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
